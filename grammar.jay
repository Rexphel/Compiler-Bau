{-- Definition of global vars
%{
    Class MiniJavaParser {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
}%

%token LBRACE
%token RBRACE
%token LBRACKET
%token RBRACKET
%token NOT
%token PLUS
%token MINUS
%token MULTIPLY
%token DIVIDE
%token ASSIGN
%token EQUAL
%token NOTEQUAL
%token GREATER
%token GREATEREQUAL
%token LESS
%token LESSEQUAL
%token IF
%token ELSE
%token WHILE
%token SEMICOLON
%token RETURN
%token BOOLEAN
%token INT
%token CHAR
%token STRING
%token NULLLITERAL
%token BOOLLITERAL
%token INTLITERAL
%token STRINGLITERAL
%token CLASS
%token NEW
%token SUPER
%token THIS
%token VOID
%token IDENTIFIER
%token EOF

%type <If> Ifthenstatement
%type <??> Ifthenelsestatement
%type <While> Whilestatement
%type <Block> Block
%type <LocalVarDecl> Localvardecleration
%type <Return> Returnstatement

%type <Assign> Assignment
%type <New> Newstmtexpr
%type <Methodcall> Methodcall
%type <Unary> Unary
%type <List<Statement>> Statements
%%


Block               : LBRACKET   RBRACKET { }
                    | LBRACKET  Statements  RBRACKET { $$ = new Block($2); }

Statements          : Statements Statement {
                        $1.add($2);
                        $$ = $1;
                    }
                    | Statement { 
                        $$ = new ArrayList<Statements>();
                        $$.add($1); 
                    }

Statement           : Ifthenstatement { }  
                    | Ifthenelsestatement { }
                    | Whilestatement { }
                    | Block { }
                    | Localvardecleration { }
                    | Returnstatement { }
                    | Emptystatement { }
                    | Stmtexprstmt { }

Stmtexprstmt        : Stmtexpr { $$ = $1 } // Instanz von StmtExprStmt benötigt??

Stmtexprexpr        : Stmtexpr { $$ = $1 } // Instanz von StmtExprExpr benötigt??

Stmtexpr            : Assignment { $$ = $1 }
                    | Newstmtexpr { $$ = $1 }
                    | Methodcall { $$ = $1 }

Assignment          : localorfieldref ASSIGN Expression { $$ = new Assign($1, $3); }
                    
Newstmtexpr          : NEW ???               // Konstruktor wo??

Methodcall          : Variable DOT name LBRACE Variables RBRACE { }

Unary               : 

Ifthenstatement     : IF LBRACE Bexpression  RBRACE  Statement { }

Ifthenelsestatement : IF LBRACE Bexpression  RBRACE Statement ELSE Statement  { }

Whilestatement      : WHILE LBRACE Bexpression  RBRACE  Statement { }

Localvardecleration : 

Emptystatement	    : SEMICOLON  { }

Returnstatement     : RETURN SEMICOLON  { }
                    | RETURN Expression  SEMICOLON { }

Bexpression         : BOOLLITERAL { }  

Expression          : INTLITERAL { }
                    | Assignment { $$ = $1; }

Field               : type name SEMICOLON { }
                    | type name EQUAL Expression SEMICOLON { }

LocalVar            : type name SEMICOLON { }
                    | type name EQUAL Expression SEMICOLON { }

Variable            : LocalVar { }
                    | Field { }

Variables           : Variable { }
                    | Variables Variable { }

Parameters          : type name { }
                    | Parameters COMMA type name { }

MethodHead          : type name LBRACE  RBRACE { }
                    | type name LBRACE Parameters RBRACE { }

MethodBody          : LBRACKET RBRACKET { }
                    | LBRACKET Block RBRACKET { }

Method              : MethodHead MethodBody { }

Extends             : EXTENDS name { }
                    | { }

Implementations     : Implementations name { }
                    | name { }

Implements          : IMPLEMENTS Implementations { }
                    | { }

ClassHead           : CLASS name { }
                    | CLASS name Extends { }
                    | CLASS name Extends Implements { }

Class               : CLASS name LBRACE methods RBRACE  { }
                    | CLASS name LBRACE RBRACE LBRACKET RBRACKET { }
                    | CLASS name LBRACE RBRACE LREACKET VarsAndMethods RBRACKET { }

VarsAndMethods      : VarsAndMethods Variable { }
                    | VarsAndMethods Method { }
                    | Variable { }
                    | Method { }
%%
}